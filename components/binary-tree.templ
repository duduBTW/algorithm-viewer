package components

import (
	"aba/algorithms"
	"strconv"
)

type BinaryTreeIdsStruct struct {
	NodeLine string
	NodeVal  string
}

var BinaryTreeIds = BinaryTreeIdsStruct{
	NodeLine: "bt-node-line",
	NodeVal:  "bt-node-value",
}

templ BinaryTree(tree algorithms.BinaryTree) {
	<div class="mx-auto flex items-center">
		if tree.Root != nil {
			@Node(tree.Root, -1)
		}
	</div>
}

templ Node(node *algorithms.Node, parentVal int) {
	<div
		class="flex-1 flex flex-col items-center w-full gap-x-1.5 gap-y-4"
	>
		@NodeLine(parentVal, node.Val)
		@NodeVal(strconv.Itoa(node.Val))
		<div class="flex gap-1.5">
			if node.Left != nil {
				@Node(node.Left, node.Val)
			} else {
				@EmptyNode()
			}
			if node.Right != nil {
				@Node(node.Right, node.Val)
			} else {
				@EmptyNode()
			}
		</div>
	</div>
}

templ EmptyNode() {
	<div class="w-5"></div>
}

templ NodeVal(val string) {
	<div
		id={ BinaryTreeIds.NodeVal }
		data-val={ val }
		class="flex items-center justify-center w-8 h-8 bg-zinc-800 border border-zinc-600 rounded-full"
	>
		{ val }
	</div>
}

templ NodeLine(start int, end int) {
	if start != -1 && end != -1 {
		<div
			id={ BinaryTreeIds.NodeLine }
			class="fixed line"
			data-start={ strconv.Itoa(start) }
			data-end={ strconv.Itoa(end) }
		></div>
	}
}
